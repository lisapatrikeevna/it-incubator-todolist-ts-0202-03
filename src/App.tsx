import React, {useState} from 'react';import './App.css';import {Todolist} from './Todolist';import {v1} from 'uuid';import {AddIemForm} from './AddItemForm';import {AppBar, Toolbar, Typography, Container, Grid, Paper} from '@material-ui/core';import {IconButton} from '@material-ui/core';import {Button} from '@material-ui/core';// import classes from '*.module.css';import {Menu} from "@material-ui/icons";import {TodolistType} from "./Api/todolistApi";export type todoListsType = TodolistType & {    filter: filterTaskType}export type taskStateType = {    [key: string]: Array<tasksType>}export type tasksType = {    id: string    title: string    isDone: boolean}export type filterTaskType = "all" | "active" | "completed";function App() {    let todoList1 = v1();    let todoList2 = v1();    let todoList3 = v1();    let [todoLists, setTodoLists] = useState<Array<todoListsType>>([        {id: todoList1, title: "some name", filter: "all"},        {id: todoList2, title: "first name", filter: "all"},        {id: todoList3, title: "last name", filter: "all"}    ])    let [tasks, setTask] = useState<taskStateType>({        [todoList1]: [            {id: v1(), title: "HTML&CSS", isDone: true},            {id: v1(), title: "JS", isDone: true},            {id: v1(), title: "ReactJS", isDone: false}        ],        [todoList2]: [            {id: v1(), title: "HTML&CSS", isDone: true},            {id: v1(), title: "JS", isDone: true},            {id: v1(), title: "Redux", isDone: false}        ],        [todoList3]: [            {id: v1(), title: "HTML&CSS", isDone: true},            {id: v1(), title: "JS", isDone: true},            {id: v1(), title: "ReactJS", isDone: false}        ]    })    function deleteTask(taskID: string, todolistID: string) {        let todoList = tasks[todolistID];        tasks[todolistID] = todoList.filter(t => t.id != taskID);        setTask({...tasks});    }    function addTask(taskName: string, todolistID: string) {        let newTask = {id: v1(), title: taskName, isDone: false};        let todoList = tasks[todolistID];        tasks[todolistID] = [newTask, ...todoList];        setTask({...tasks});    }    function changeStatus(id: string, isDone: boolean, todolistID: string) {        let todoList = tasks[todolistID];        let task = todoList.find(t => t.id === id)        if (task) {            task.isDone = isDone        }        setTask({...tasks})    }    function changeTaskTitle(id: string, title: string, todolistID: string) {        let todoList = tasks[todolistID];        let task = todoList.find(t => t.id === id)        if (task) {            task.title = title        }        setTask({...tasks})    }    function changeFilter(value: filterTaskType, todolistID: string) {        let todoList = todoLists.find(tl => tl.id === todolistID);        if (todoList) {            todoList.filter = value;            setTodoLists([...todoLists])        }    }    function removeTodoLost(todolistID: string) {        let newTodoList = todoLists.filter(tl => tl.id != todolistID);        setTodoLists(newTodoList);        delete tasks[todolistID];        setTask({...tasks});    }    function addTodoList(title: string) {        let newTodoListID = v1();        let newTodoList: todoListsType = {            id: newTodoListID,            title: title,            filter: 'all'        }        setTodoLists([...todoLists, newTodoList])        setTask({...tasks, [newTodoListID]: []})    }    function changeTodoListTitle(todolistID: string, newTitle: string) {        let todoList = todoLists.find(tl => tl.id === todolistID);        if (todoList) {            todoList.title = newTitle;            setTodoLists({...todoLists});        }    }    return (        <div className="App">            <AppBar position="static">                <Toolbar>                    <IconButton edge="start" color="inherit" aria-label="menu">                        <Menu/>                    </IconButton>                    <Typography variant="h6">                        My lists                    </Typography>                    <Button color="inherit">Login</Button>                </Toolbar>            </AppBar>            < Container maxWidth="md" style={{padding: "10px"}}>                <Grid container>                    <div className="mainInput"><AddIemForm addItem={addTodoList}/></div>                </Grid>                <Grid container spacing={3}>                    {/* <div className="wrapTodolist"> */}                    {todoLists.map(tl => {                        let taskForTodo = tasks[tl.id];                        if (tl.filter === 'active') {                            taskForTodo = tasks[tl.id].filter(t => t.isDone === true)                        }                        if (tl.filter === 'completed') {                            taskForTodo = tasks[tl.id].filter(t => t.isDone === false)                        }                        return (                            <Grid item>                                <Paper style={{padding: "7px 15px"}} elevation={3}>                                    <Todolist                                        key={tl.id}                                        id={tl.id}                                        filter={tl.filter}                                        title={tl.title}                                        tasks={taskForTodo}                                        deleteTask={deleteTask}                                        addTask={addTask}                                        changeFilter={changeFilter}                                        changeStatus={changeStatus}                                        removeTodoLost={removeTodoLost}                                        changeTaskTitle={changeTaskTitle}                                        changeTodoListTitle={changeTodoListTitle}                                    />                                </Paper>                            </Grid>                        )                    })}                    {/* </div> */}                </Grid>            </Container>        </div>    );}export default App;